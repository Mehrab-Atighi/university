"0","loss_data <- danishuni$Loss          # Extract the loss column"
"0","n <- length(loss_data)               # Number of observations"
"0",""
"0","# Values of p to consider"
"0","p_values <- seq(1,4 , 1)"
"0",""
"0","# Preallocate storage for R_n(p)"
"0","R_n_matrix <- matrix(NA, nrow = n, ncol = length(p_values))"
"0","colnames(R_n_matrix) <- paste0(""p="", p_values)"
"0",""
"0","# Calculate R_n(p) for each value of p"
"0","for (j in seq_along(p_values)) {"
"0","  p <- p_values[j]"
"0","  abs_loss_p <- abs(loss_data)^p"
"0","  "
"0","  for (i in 1:n) {"
"0","    S_n <- sum(abs_loss_p[1:i])       # Sum up to the i-th element"
"0","    M_n <- max(abs_loss_p[1:i])       # Max up to the i-th element"
"0","    R_n_matrix[i, j] <- M_n / S_n     # Ratio"
"0","  }"
"0","}"
"0",""
"0","# Plot R_n(p) against n for each p"
"0","par(mfrow = c((round(length(p_values)/2 , 0)), 2))  # One plot for each p"
"0","for (j in seq_along(p_values)) {"
"0","  plot(1:n, R_n_matrix[, j], type = ""l"", "
"0","       main = paste(""R_n(p) for p ="", p_values[j]),"
"0","       xlab = ""n"", ylab = ""R_n(p)"", col = ""blue"", lwd = 2)"
"0","  abline(h = 0, col = ""red"", lty = 2) # Add reference line at 0"
"0","}"
